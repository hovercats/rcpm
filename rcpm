#!/bin/rc

flag e +

# Assume we run locally if no global config is present
if (test ! -f /etc/rcpm.conf) . ./rcpm.conf
if not . /etc/rcpm.conf

fn log {
	printf '%s\n' $"*
}

fn errexit {
	log ERROR: $"*
	exit 1
}

if (~ $#RCPM_PATH 0) {
	errexit 'RCPM_PATH is not set'
}

fn rcpm_help {
	log 'Usage: rcpm b|c|d||h|i|l|m|s'
}

fn dl_pkg {
	cd $RCPM_PATH/$pkg
	if (test -f url) {
		if (test -f sha256) {
			if (test ! -f `{awk '{print $2}' sha256}) curl -LK url -O
			if not log 'File already downloaded'
		}
		if not {
			log 'sha256 file not found, downloading anyway...'
			curl -LK url -O
		}
	}
	if not {
		errexit 'Url file not found!'
	}
}

fn chksum_pkg {
	cd $RCPM_PATH/$pkg
	dl_pkg
	if (test -f sha256) sha256sum -c sha256
	if not {
		errexit 'sha256 file not found, cannot verify sha256sum!'
	}
}

fn unpack_pkg {
	for (archive in `{awk '{print $2}' sha256}) {
		switch($archive) {
			case *.tar.gz
				tool=gzip
			case *.tar.xz
				tool=xz
			case *.tar.bz2
				tool=bzip2
			case *
				exit 1
		}
	$tool -dc $archive | pax -r -s ',^[^/]*,src,'
	}
}

fn get_ver {
	version=`{cat $RCPM_PATH/$pkg/ver}
	ver=$version(1)
	rev=$version(2)

}
fn packup_pkg {
	mkdir -p ./$RCPM_DB/$pkg
	get_ver
	printf $"version >./$RCPM_DB/$pkg/ver
	gen_manifest
	test -d $RCPM_CACHE || mkdir -p $RCPM_CACHE
	pax -w . | gzip > $RCPM_CACHE/$pkg@$ver-$rev.tar.gz
}

fn check_prebuilt {
	if (test ! -f $RCPM_CACHE/$pkg@$ver-$rev.tar.gz) {
		log $pkg is not built
	}
}

fn gen_manifest {
	find . | sed -e '/^\.\/$/d' \
		-e 's/^\.//g' -e 's/\/$//g' \
		-e '/^[[:space:]]*$/d' | \
		sort -ru >./$RCPM_DB/$pkg/manifest
}

fn install_pkg {
	cd $RCPM_ROOT
	get_ver
	check_prebuilt || {gzip -dc $RCPM_CACHE/$pkg@$ver-$rev.tar.gz | pax -r
	log $pkg installed successfully}
}

fn build_pkg {
	cd $RCPM_PATH/$pkg
	if (test ! -f url) {
		git submodule update --init --checkout src
		git -C src clean -xfdq
	}
	if not {
		chksum_pkg $pkg
		rm -rf src
		if (test -f fetch.rc) {
			./fetch.rc
		}
		if not unpack_pkg $archive
	}
	cd src
	destdir=/tmp/$pid/$pkg
	../build
	cd $destdir
	packup_pkg
	install_pkg
}


fn get_local_ver {
	_version=`{cat $RCPM_ROOT/$RCPM_DB/$pkg/ver}
	_ver=$_version(1)
	_rev=$_version(2)
}

fn list_pkg {
	get_local_ver
	log $pkg $_ver-$_rev
}

fn rm_pkg {
	filelist=`{cat $RCPM_ROOT/$RCPM_DB/$pkg/manifest}
	for (files in $filelist) {
		rmdir $RCPM_ROOT/$files >[2=] || rm -f $RCPM_ROOT/$files >[2=]
	}
}

fn update_pkg {
	for (file in $RCPM_ROOT/$RCPM_DB/*) {
		pkg=`{basename $file}
		if (cmp -s $RCPM_ROOT/$RCPM_DB/$pkg/ver $RCPM_PATH/$pkg/ver) {
			log $pkg is up to date
		}
		if not {
			get_ver
			if (check_prebuilt) build_pkg $pkg
			if not install_pkg $pkg
		}
	}
}

switch($1) {
	case b
		shift
		for (pkg) build_pkg $pkg
	case c
		shift
		for (pkg) chksum_pkg $pkg
	case d
		shift
		for (pkg) dl_pkg $pkg
	case h
		rcpm_help
	case i
		shift
		for (pkg) install_pkg $pkg
	case l
		shift
		switch($#*) {
		case 0
			for (file in $RCPM_ROOT/$RCPM_DB/*) {
				pkg=`{basename $file}
				get_local_ver
				log $pkg $_ver-$_rev
			}
		case *
			for (pkg) list_pkg $pkg
		}
	case m
		cat $RCPM_ROOT/$RCPM_DB/$2/manifest
	case r
		shift
		for (pkg) rm_pkg $pkg
	case s
		shift
		for (pkg in $*) find $RCPM_PATH -type d -name $pkg
	case u
		update_pkg
	case *
		log 'Error: Invalid arguement!'
		rcpm_help
		exit 1
}
